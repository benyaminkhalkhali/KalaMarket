// <auto-generated />
using System;
using KalaMarket.DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KalaMarket.DataLayer.Migrations
{
    [DbContext(typeof(KalaMarketContext))]
    [Migration("20211129062315_update-tbl-cartdetail2")]
    partial class updatetblcartdetail2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Address.UserAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("userAddresses");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<int>("Product_PriceID")
                        .HasColumnType("int");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartId");

                    b.ToTable("cartDetails");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Discount.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsableCount")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Discount.UserDiscount", b =>
                {
                    b.Property<int>("UserDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDiscountId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("userDiscounts");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.MainSlider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SliderAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SliderSort")
                        .HasColumnType("int");

                    b.Property<string>("SliderTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderId");

                    b.ToTable("mainSliders");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryEnTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryFaTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("SubCategory")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("SubCategory");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavouriteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("favourites");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ProductCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductEnTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductFaTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSell")
                        .HasColumnType("int");

                    b.Property<byte>("ProductStar")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProductTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductWeight")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductColor", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("ColorId");

                    b.ToTable("productColors");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductGallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GalleryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GalleryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GalleryId");

                    b.HasIndex("ProductId");

                    b.ToTable("productGalleries");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductGuarantee", b =>
                {
                    b.Property<int>("GuaranteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GuaranteeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("GuaranteeId");

                    b.ToTable("productGuarantees");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateDiscount")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MainPrice")
                        .HasColumnType("int");

                    b.Property<int>("MaxOrderCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductGuaranteeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialPrice")
                        .HasColumnType("int");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductGuaranteeId");

                    b.HasIndex("ProductId");

                    b.ToTable("productPrices");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName", b =>
                {
                    b.Property<int>("PropertyNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PropertyNameId");

                    b.ToTable("propertyNames");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName_Category", b =>
                {
                    b.Property<int>("pcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyNameId")
                        .HasColumnType("int");

                    b.HasKey("pcId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyNameId");

                    b.ToTable("propertyName_Categories");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyValue", b =>
                {
                    b.Property<int>("PropertyValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyNameId")
                        .HasColumnType("int");

                    b.Property<string>("Propertyvalue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("PropertyValueId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyNameId");

                    b.ToTable("propertyValues");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewDescription")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewNegative")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReviewPositive")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("rolePermissions");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAccount")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAndLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Address.UserAddress", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("userAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Cart", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.Address.UserAddress", "address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.CartDetail", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.Cart", "cart")
                        .WithMany("cartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cart");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Discount.UserDiscount", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.Discount.Discount", "discount")
                        .WithMany("userDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("userDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("discount");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Category", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Category", "categoryy")
                        .WithMany()
                        .HasForeignKey("SubCategory");

                    b.Navigation("categoryy");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Answer", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Question", "question")
                        .WithMany("answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("question");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Comment", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Question", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("questions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Favourite", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("favourites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Product", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Brand", "brand")
                        .WithMany("products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("category");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductGallery", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("productGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductPrice", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.ProductColor", "productColor")
                        .WithMany("productPrices")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.ProductGuarantee", "productGuarantee")
                        .WithMany("productPrices")
                        .HasForeignKey("ProductGuaranteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("productPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("productColor");

                    b.Navigation("productGuarantee");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName_Category", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Category", "category")
                        .WithMany("propertyNames")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName", "propertyName")
                        .WithMany("propertyNames")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("propertyName");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyValue", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName", "propertyName")
                        .WithMany("propertyValues")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("propertyName");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Review", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.ProductEntities.Product", "product")
                        .WithMany("reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.RolePermission", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.Role.Permission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.Role.Role", "role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.UserRole", b =>
                {
                    b.HasOne("KalaMarket.DataLayer.Entities.Role.Role", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KalaMarket.DataLayer.Entities.User", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Cart", b =>
                {
                    b.Navigation("cartDetails");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Discount.Discount", b =>
                {
                    b.Navigation("userDiscounts");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Brand", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Category", b =>
                {
                    b.Navigation("products");

                    b.Navigation("propertyNames");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.FAQ.Question", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("favourites");

                    b.Navigation("productGalleries");

                    b.Navigation("productPrices");

                    b.Navigation("questions");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductColor", b =>
                {
                    b.Navigation("productPrices");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.ProductGuarantee", b =>
                {
                    b.Navigation("productPrices");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.ProductEntities.PropertyName", b =>
                {
                    b.Navigation("propertyNames");

                    b.Navigation("propertyValues");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.Permission", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.Role.Role", b =>
                {
                    b.Navigation("rolePermissions");

                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("KalaMarket.DataLayer.Entities.User", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("comments");

                    b.Navigation("favourites");

                    b.Navigation("questions");

                    b.Navigation("userAddresses");

                    b.Navigation("userDiscounts");

                    b.Navigation("userRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
